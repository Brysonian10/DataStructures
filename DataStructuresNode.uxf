<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>906</x>
      <y>0</y>
      <w>192</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>bg=green
Node&lt;Type&gt;

--
- data : Type
- next : Node&lt;Type&gt;

--
+Node() : constructor
+Node&lt;Type&gt;(Type) : constructor

+getData() : Type
+setData(Type) : void
+setNext() : Node&lt;Type&gt; *
+setNext(Node&lt;Type&gt;*) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>756</x>
      <y>180</y>
      <w>252</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>bg=red
LinearNode&lt;Type&gt;

--
- Next : Node&lt;Type&gt;

--
LinearNode&lt;Type&gt;(Type) : constructor
LinearNode&lt;Type&gt;(Type, LinearNode&lt;Type&gt;) : constructor

+getNext() : Node&lt;Type&gt; *
+setNext(Node&lt;Type&gt; *) : void



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1140</x>
      <y>0</y>
      <w>192</w>
      <h>138</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;

--
- size : int 
- internalArray : Type*

--
+ Array&lt;Type&gt;(int) : constructor
+ Array&lt;Type&gt;(Array&lt;Type&gt;) : constructor
+ getSize() : int
+ setAtIndex(int, Type) : void
+ getFromIndex(int) : Type
+ operator [ ]
+ operator = Array&lt;Type&gt;&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>906</x>
      <y>138</y>
      <w>144</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>220.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>702</x>
      <y>444</y>
      <w>162</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>LinkedList&lt;Type&gt;
--
- front : LinearNode&lt;Type&gt; *
- end : LinearNode&lt;Type&gt; *
--
*List Structure methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type

*ListAccessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt;*
+ getend() : LinearNode&lt;Type&gt;*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>606</x>
      <y>636</y>
      <w>168</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>Queue&lt;Type&gt;
--

--
+ Queue() : constructor
+ ~Queue() : destructor
*Queue Methods*
+ enqueue(Type) : void
+ dequeue() : Type
+ peek() : Type

*List Structure methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type

*ListAccessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt;*
+ getend() : LinearNode&lt;Type&gt;*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>816</x>
      <y>636</y>
      <w>174</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>Stack&lt;Type&gt;
--

--
+ Stack() : constructor
+ ~Stack() : destructor
*Stack Methods*
+ push(Type) : void
+ pop() : Type
+ peek() : Type

*List Structure methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type

*ListAccessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt;*
+ getend() : LinearNode&lt;Type&gt;*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>780</x>
      <y>426</y>
      <w>30</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;30.0;30.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>636</x>
      <y>606</y>
      <w>138</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>210.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>828</x>
      <y>606</y>
      <w>42</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;50.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>834</x>
      <y>282</y>
      <w>72</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1086</x>
      <y>402</y>
      <w>138</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>Music
--
-Too Many
--
+Music() : constructor
+Music(string) : constructor
+getXXX() : various
+ == : bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1242</x>
      <y>402</y>
      <w>138</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>CrimeData
--
-Too Many
--
+CrimeData() : constructor
+CrimeData(string) : constructor
+getXXX() : various
+ == : bool
+ &lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>768</x>
      <y>306</y>
      <w>144</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>List&lt;Type&gt;
--
#size : int
--
*List Structure methods*
getFromIndex(int) : Type
add(Type) : void
addAtIndex(int, Type) : void
remove(int) : Type

*ListAccessors*
getSize() : int
getFront() : LinearNode&lt;Type&gt;*
getend() : LinearNode&lt;Type&gt;*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1122</x>
      <y>576</y>
      <w>114</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>LinearTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1254</x>
      <y>576</y>
      <w>114</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>TreeTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1122</x>
      <y>660</y>
      <w>114</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>GraphTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1254</x>
      <y>660</y>
      <w>114</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>HashableTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1122</x>
      <y>744</y>
      <w>114</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>AlgorithmTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>768</x>
      <y>576</y>
      <w>366</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
Aggrigation
</panel_attributes>
    <additional_attributes>590.0;20.0;160.0;10.0;220.0;40.0;10.0;110.0;80.0;130.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1086</x>
      <y>222</y>
      <w>138</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>DoubleNode &lt;Type&gt;
--
- nextNode : DN *
- prevNode : DN *
--
+ DN()
+ DN(Type)
+ DN (Type, DN, DN *)
+ get/set</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1062</x>
      <y>138</y>
      <w>138</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;210.0;140.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1350</x>
      <y>6</y>
      <w>330</w>
      <h>384</h>
    </coordinates>
    <panel_attributes>bg=green

Non-Linear :: Graph
--
- *MAXIMUM : int*
- adjacencyMatrix : bool [][]
- weightCostMatrix : int [][]
- graphData : Type []
- vertexCount : int

--

Graph() : constructor
+ addVertex(const Type&amp; value) : void

*Connect vertices*
+ addEdge(int source, int target);
+ addEdgeUndirected(int source, int target) : void
+ addEdgeCost(int source, int target) : void

*Disconnect vertices*
+ removeEdge(int source, int target) : void
+ removeEdgeUndirected(int source, int target) : void
+ removeEdgeCost(int source, int target) : void

*Accessors*
+ operator [] (int vertex) : Type &amp;
+ operator [] (int vertex) : Type const
+ size() const : int

*Check connections*
+ hasUndirectedConnection(int source, int target) : const bool
+ areConnected(int source, int target) : const bool
+ neighbors(int vertex) : const std::set&lt;int&gt;

*Traversals*
+ depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ breadthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ costTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
- depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex, bool markedVertices[]) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>462</x>
      <y>186</y>
      <w>216</w>
      <h>156</h>
    </coordinates>
    <panel_attributes>BinaryTreeNode&lt;Type&gt;
--
- root : BinaryTreeNode&lt;Type&gt; *
- leftChild : BinaryTreeNode&lt;Type&gt; *
- rightChild : BinaryTreeNode&lt;Type&gt; *

--
+ BinaryTreeNode&lt;Type&gt;() : constructor
+ BinaryTreeNode&lt;Type(Type) : constructor

+ getRoot() : BinaryTreeNode&lt;Type&gt;
+ getLeftChild() : BinaryTreeNode&lt;Type&gt;
+ getRightChild() : BinaryTreeNode&lt;Type&gt;

+ setRoot(BinaryTreeNode&lt;Type&gt; *) : void
+ setLeftChild(BinaryTreeNode&lt;Type&gt; *) : void
+ setRightChild(BinaryTreeNode&lt;Type. *) void

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>642</x>
      <y>138</y>
      <w>312</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>500.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>204</x>
      <y>450</y>
      <w>132</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Tree&lt;Type&gt;
--

--
*Informational Methods*
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool

*Traversal Methods*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ posOrderTraversal() : void

*Operational Methods*
+ insert(Type) : void
+ remove(Type) : void
+ contains(Type) : bool
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>444</x>
      <y>402</y>
      <w>222</w>
      <h>174</h>
    </coordinates>
    <panel_attributes>N_aryTreeNode&lt;Type&gt;
--
- root : N_aryTreeNode&lt;Type&gt; *
- children : List&lt;N_aryTreeNode&gt;*&gt;
- size : int

--
+ N_aryTreeNode&lt;Type&gt;(int): constructor
+ N_aryTreeNode&lt;Type&gt;(Type, int) : constructor

+ setRoot(N_aryTreeNode&lt;Type&gt;*) : void
+ getRoot() : N_aryTreeNode&lt;Type&gt;*

+ addChild(N_aryTreeNode&lt;Type&gt;*) : void
+ getChild(int) : N_aryTreeNode&lt;Type&gt;*
+ getChildren() : List&lt;N_aryTreeNode&lt;Type&gt;*&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>54</y>
      <w>348</w>
      <h>372</h>
    </coordinates>
    <panel_attributes>BinarySearchTree&lt;Type&gt;
--
*Structure*
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() " destructor
# destroyTree() : void

*Informational Methods*
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool
+ getRoot() : BinaryTreeNode&lt;Type&gt; *

*Recursive Information Helpers*
# calculateSize(BinaryTreeNode&lt;Type&gt; * startNode) : int
# calculateHeight(BinaryTreeNode&lt;Type&gt; * startNode) : int
# isBalanced(BinaryTreeNode&lt;Type&gt; * startNode) : bool
# isComplete(BinaryTreeNode&lt;Type. * startNode, int index, int size) : bool

*Data Methods*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void

*Recursive Data Helpers*
# removeNode(BinaryTreeNode&lt;Type&gt; * removeMe) : void

*Traversals*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ posOrderTraversal() : void

*Recursive Traversals Helper*
# inOrderTraversal(BinaryTreeNode&lt;Type&gt; * inStart) : void
# preOrderTraversal(BinaryTreeNode&lt;Type&gt; * preStart) :void
# postOrderTraversal(BinaryTreeNode&lt;Type&gt; * postStart) : void
# getRightMostChild(BinaryTreeNode&lt;Type&gt; * current) : BinaryTreeNode&lt;Type&gt; *
# getLeftMostChild(BinaryTreeNode&lt;Type&gt; * current) : BinaryTreeNode&lt;Type&gt; *
</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
